p <- predict(m_lm, d, type = "response")
Accuracy(d$y, p)
m_gam <- gam(y ~ s(V1) + s(V2) + s(V3) + s(V4), data = d, family = "binomial")
p <- predict(m_gam, external, type = "response")
Accuracy(external$y, p)
plot(m_gam)
m_gam <- gam(y ~ s(V1, df = 11) + s(V2, df = 11) + s(V3) + s(V4), data = d, family = "binomial")
p <- predict(m_gam, external, type = "response")
Accuracy(external$y, p)
plot(m_gam)
m_gam <- gam(y ~ s(V1, df = 4) + s(V2, df = 4) + s(V3 = ) + s(V4), data = d, family = "binomial")
p <- predict(m_gam, external, type = "response")
m_gam <- gam(y ~ s(V1, df = 4) + s(V2, df = 4) + s(V3) + s(V4), data = d, family = "binomial")
p <- predict(m_gam, external, type = "response")
Accuracy(external$y, p)
plot(m_gam)
m_gam <- gam(y ~ s(V1, df = 1) + s(V2) + s(V3) + s(V4), data = d, family = "binomial")
p <- predict(m_gam, external, type = "response")
Accuracy(external$y, p)
plot(m_gam)
m_gam <- gam(y ~ s(V1, df = 2) + s(V2) + s(V3) + s(V4), data = d, family = "binomial")
p <- predict(m_gam, external, type = "response")
Accuracy(external$y, p)
plot(m_gam)
m_gam <- gam(y ~ s(V1, df = 2) + s(V2) + s(V3) + s(V4, df = 7), data = d, family = "binomial")
p <- predict(m_gam, external, type = "response")
Accuracy(external$y, p)
plot(m_gam)
a <- "y ~ s(V1, df = 2) + s(V2) + s(V3) + s(V4, df = 7)"
a
as.formula(a)
m_gam <- gam(as.formula(a), data = d, family = "binomial")
p <- predict(m_gam, external, type = "response")
Accuracy(external$y, p)
plot(m_gam)
colnames(d)
a
a[1]
df <- 4
n_pred <- ncol(d) - 2 #p and y are not predictors
var_names <- colnames(d)[1:n_pred]
var_names
paste("s(",varnames,", df = ", df, ")", sep = "")
paste("s(",var_names,", df = ", df, ")", sep = "")
formula_ <- paste("s(",var_names,", df = ", df, ")", sep = "")
formula_ <- paste(formula_, collapse = "+")
formula_
formula_ <- paste("s(",var_names,", df = ", df, ")", sep = "")
formula_ <- paste(formula_, collapse = " + ")
formula_ <- paste("y ~", formula_)
formula_
make_gam_formula <- function(d, df = 4){
n_pred <- ncol(d) - 2 #p and y are not predictors
var_names <- colnames(d)[1:n_pred]
if (length(df) == n_pred) df <- rep(df[1], n_pred)
formula_ <- paste("s(",var_names,", df = ", df, ")", sep = "")
formula_ <- paste(formula_, collapse = " + ")
formula_ <- paste("y ~", formula_)
return(as.formula(formula_))
}
make_gam_formula(d, 5)
m_gam <- gam(make_gam_formula(d, 4), data = d, family = "binomial")
p <- predict(m_gam, external, type = "response")
Accuracy(external$y, p)
plot(m_gam)
draw_function(f_3)
draw_function(f_4)
gam::gam
intrcpt
make_gam_fit <- function(df) function(data, ...)
gam::gam(make_gam_formula(data, df), "binomial", data)
a <- make_gam_fit(4)
a
make_gam_fit <- function(df) function(data, ...)
gam::gam(make_gam_formula(data, parse(text = df)), "binomial", data)
a <- make_gam_fit(4)
a
make_gam_fit <- function(df) function(data, ...)
gam::gam(make_gam_formula(data, df), "binomial", data)
a <- make_gam_fit(4)
mmm <- a(d)
summary(mmm)
a <- make_gam_fit(11)
mmm <- a(d)
summary(mmm)
plot(mmm)
plot(mmm)
mmm
p <- predict(mmm, external)
p
p <- predict(mmm, external, type = "response")
Accuracy(external$y, p)
plot(m_gam)
gam_predict <- function(model, data) predict(model, data, type="response")
dfs <- c(1,4,7,15)
model_list <- list()
for (df in dfs){
model <- list(fit = make_gam_fit(dt), predict = gam_predict)
model_list[[parse("gam_df_",df,sep = "")]]
}
for (df in dfs){
model <- list(fit = make_gam_fit(dt), predict = gam_predict)
model_list[[paste("gam_df_",df,sep = "")]]
}
model_list[[1]]
dfs <- c(1,4,7,15)
model_list <- list()
for (df in dfs){
model <- list(fit = make_gam_fit(dt), predict = gam_predict)
model_list[[paste("gam_df_",df,sep = "")]] <- model
}
m_gam <- model_list$gam_df_15$fit(d)
dim(d)
make_gam_formula <- function(d, df = 4){
n_pred <- ncol(d) - 2 #p and y are not predictors
var_names <- colnames(d)[1:n_pred]
if (length(df) == n_pred) df <- rep(df[1], n_pred)
df <- as.integer(df)
formula_ <- paste("s(",var_names,", df = ", df, ")", sep = "")
formula_ <- paste(formula_, collapse = " + ")
formula_ <- paste("y ~", formula_)
return(as.formula(formula_))
}
make_gam_formula <- function(d, df = 4){
n_pred <- ncol(d) - 2 #p and y are not predictors
var_names <- colnames(d)[1:n_pred]
if (length(df) == n_pred) df <- rep(df[1], n_pred)
df <- as.integer(df)
formula_ <- paste("s(",var_names,", df = ", df, ")", sep = "")
formula_ <- paste(formula_, collapse = " + ")
formula_ <- paste("y ~", formula_)
return(as.formula(formula_))
}
gam_fit <- function(data, df = 4)
gam::gam(make_gam_formula(data, df), "binomial", data)
gam_predict <- function(model, data) predict(model, data, type="response")
make_gam_fit <- function(df) function(data, ...)
gam::gam(make_gam_formula(data, df), "binomial", data)
dfs <- c(1,4,7,15)
model_list <- list()
for (df in dfs){
model <- list(fit = make_gam_fit(dt), predict = gam_predict)
model_list[[paste("gam_df_",df,sep = "")]] <- model
}
m_gam <- model_list$gam_df_15$fit(d)
draw_function <- function(func, intervals = c(-3, 3), n = 1000){
x <- seq(intervals[1], intervals[2], length.out = n)
plot(x, func(x), type = "l")
}
AUC <- function(y, prob) as.numeric(pROC::auc(y, prob, direction="<", quiet = TRUE))
Accuracy <- function(y, prob, t = .5) mean(y == (prob > t))
generate_nonlinear_data <- function(n ,list_of_func, intercept = 0){
n_pred <- length(list_of_func)
x <- matrix(rnorm(n*n_pred), n, n_pred)
eta <- rep(intercept, n)
for (i in 1:n_pred) {
func <- list_of_func[[i]]
eta <- eta + func(x[,i])
}
p <- 1/(1+exp(-eta))
y <- rbinom(n, 1, p) #
dat <- as.data.frame(x)
dat$y <- y; dat$p <- p
return(dat)
}
make_gam_formula <- function(d, df = 4){
n_pred <- ncol(d) - 2 #p and y are not predictors
var_names <- colnames(d)[1:n_pred]
if (length(df) == n_pred) df <- rep(df[1], n_pred)
formula_ <- paste("s(",var_names,", df = ", df, ")", sep = "")
formula_ <- paste(formula_, collapse = " + ")
formula_ <- paste("y ~", formula_)
return(as.formula(formula_))
}
set_intercept <- function(list_of_func, data_generator, ratio = .5, intercept = 0, n_iter = 100){
n_data <- c(10^2, 10^3, 10^4, 10^5)
steps <- c(.1, .03, .01, .003)
good_guess <- 0; i <- 1
while (i <= length(n_data)) {
n <- n_data[i]; step <- steps[i]
d <- data_generator(n, list_of_func, intercept)
n_1s <- sum(d$y == 1)
random_ratio <- n_1s / n
p_binom <- pbinom(n_1s, n, ratio)
#cat("intercept:", intercept, "pbinom", p_binom, "\n")
if (abs(p_binom - .5) < 0.25){
good_guess <- good_guess + 1
#cat("good_guesses:", good_guess, "\n")
if (good_guess == 3) {i <- i + 1; good_guess <- 0}
#cat("hallelujah", i, "\n")}
} else {
good_guess <- 0
intercept = if (random_ratio < ratio) intercept + step else intercept - step
}
}
ints <- numeric(n_iter)
for (i in 1:n_iter){
d <- data_generator(10^5, list_of_func, intercept)
random_ratio <- sum(d$y == 1)/10^5
intercept = if (random_ratio < ratio) intercept + .001 else intercept - .001
ints[i] <- intercept
}
return(ints)
}
f_1 <- \(x) x^4/4-1
draw_function(f_1)
f_2 <- \(x) sin(x*1.5)*2
draw_function(f_2)
f_3 <- \(x) ifelse(x < 1, 1, -2*x + 3)
draw_function(f_3)
f_4 <- \(x) 1-x^2
draw_function(f_4)
list_of_functions <- list(f_1, f_2, f_3, f_4)
d <- generate_nonlinear_data(100, list_of_functions, intrcpt)
external <- generate_nonlinear_data(10^5, list_of_functions, mean(intercepts))
intercept <- 0.4372
d <- generate_nonlinear_data(100, list_of_functions, intrcpt)
intrcpt <- intercept
d <- generate_nonlinear_data(100, list_of_functions, intrcpt)
external <- generate_nonlinear_data(10^5, list_of_functions, mean(intercepts))
external <- generate_nonlinear_data(10^5, list_of_functions, intrcpt)
source("validation_simulation.R")
source("data_generation.R")
library(doParallel, quiet = TRUE)
on_cluster <- Sys.info()['sysname'] == "Linux"
print(getwd())
cores <- if(on_cluster) Sys.getenv(paste("SLURM_CPUS_PER_TASK")) else 4
print(paste("Using ",cores, " cores"))
cl <- makeCluster(as.numeric(cores))
performance_measures <- create_performance_measures_list()
dfs <- c(1,4,7,15)
model_list <- list()
for (df in dfs){
model <- list(fit = make_gam_fit(dt), predict = gam_predict)
model_list[[paste("gam_df_",df,sep = "")]] <- model
}
m_gam <- model_list$gam_df_15$fit(d)
make_gam_formula <- function(d, df = 4){
print(df)
n_pred <- ncol(d) - 2 #p and y are not predictors
var_names <- colnames(d)[1:n_pred]
if (length(df) == n_pred) df <- rep(df[1], n_pred)
df <- as.integer(df)
formula_ <- paste("s(",var_names,", df = ", df, ")", sep = "")
formula_ <- paste(formula_, collapse = " + ")
formula_ <- paste("y ~", formula_)
return(as.formula(formula_))
}
dfs <- c(1,4,7,15)
model_list <- list()
for (df in dfs){
model <- list(fit = make_gam_fit(dt), predict = gam_predict)
model_list[[paste("gam_df_",df,sep = "")]] <- model
}
m_gam <- model_list$gam_df_15$fit(d)
df
make_gam_formula <- function(d, df_ = 4){
print(df_)
n_pred <- ncol(d) - 2 #p and y are not predictors
var_names <- colnames(d)[1:n_pred]
if (length(df_) == n_pred) df_ <- rep(df[1], n_pred)
#df_ <- as.integer(df_)
formula_ <- paste("s(",var_names,", df = ", df_, ")", sep = "")
formula_ <- paste(formula_, collapse = " + ")
formula_ <- paste("y ~", formula_)
return(as.formula(formula_))
}
make_gam_formula(d, 5)
make_gam_fit <- function(df_) function(data, ...)
gam::gam(make_gam_formula(data, df_), "binomial", data)
dfs <- c(1,4,7,15)
model_list <- list()
for (df in dfs){
model <- list(fit = make_gam_fit(dt), predict = gam_predict)
model_list[[paste("gam_df_",df,sep = "")]] <- model
}
m_gam <- model_list$gam_df_15$fit(d)
stats::df
make_gam_formula <- function(d, df_ = 4){
print(df_)
n_pred <- ncol(d) - 2 #p and y are not predictors
var_names <- colnames(d)[1:n_pred]
if (length(df_) == n_pred) df_ <- rep(df_[1], n_pred)
#df_ <- as.integer(df_)
formula_ <- paste("s(",var_names,", df = ", df_, ")", sep = "")
formula_ <- paste(formula_, collapse = " + ")
formula_ <- paste("y ~", formula_)
return(as.formula(formula_))
}
make_gam_fit <- function(df_) function(data, ...)
dfs <- c(1,4,7,15)
model_list <- list()
for (df in dfs){
model <- list(fit = make_gam_fit(dt), predict = gam_predict)
model_list[[paste("gam_df_",df,sep = "")]] <- model
}
m_gam <- model_list$gam_df_15$fit(d)
p <- predict(m_gam, external, type = "response")
summary(m_gam)
m_gam
dfs <- c(1,4,7,15)
model_list <- list()
for (df_ in dfs){
model <- list(fit = make_gam_fit(df_), predict = gam_predict)
model_list[[paste("gam_df_",df_,sep = "")]] <- model
}
m_gam <- model_list$gam_df_15$fit(d)
summary(m_gam)
model_list$gam_df_15$fit()
model_list$gam_df_15$fit
make_gam_fit <- function(df_) {
return(function(data, ...)
gam::gam(make_gam_formula(data, df_), "binomial", data))
}
a <- make_gam_fit(5)
m_gam <- a(d)
summary(m_gam)
stats::model
model
dfs <- c(1,4,7,15)
model_list <- list()
for (df_ in dfs){
m <- list(fit = make_gam_fit(df_), predict = gam_predict)
model_list[[paste("gam_df_",df_,sep = "")]] <- m
}
model_list$gam_df_15
model_list$gam_df_15$fit()
model_list$gam_df_15$fit
m_gam <- model_list$gam_df_15$fit(d)
summary(m_gam)
source("validation_simulation.R")
source("data_generation.R")
library(doParallel, quiet = TRUE)
on_cluster <- Sys.info()['sysname'] == "Linux"
print(getwd())
cores <- if(on_cluster) Sys.getenv(paste("SLURM_CPUS_PER_TASK")) else 4
print(paste("Using ",cores, " cores"))
cl <- makeCluster(as.numeric(cores))
registerDoParallel(cl)
performance_measures <- create_performance_measures_list()
dfs <- c(1,4,7,15)
model_list <- list()
for (df_ in dfs){
m <- list(fit = make_gam_fit(df_), predict = gam_predict)
model_list[[paste("gam_df_",df_,sep = "")]] <- m
}
f_1 <- \(x) x^4/4-1
draw_function(f_1)
f_2 <- \(x) sin(x*1.5)*2
draw_function(f_2)
f_3 <- \(x) ifelse(x < 1, 1, -2*x + 3)
draw_function(f_3)
f_1 <- \(x) x^4/4-1
f_2 <- \(x) sin(x*1.5)*2
f_3 <- \(x) ifelse(x < 1, 1, -2*x + 3)
f_4 <- \(x) 1-x^2
list_of_functions <- list(f_1, f_2, f_3, f_4)
intrcpt <- 0.4372
n_sim <- 4 # its is rather low, but we can already see trends
n_t <- 100
n_external <- 10^5
start.time <- Sys.time()
all_results <- run_simulation(n_t, n_sim, n_external,
generate_nonlinear_data, performance_measures,
models_list, seed = 5^6, pooled = TRUE,
list_of_func = list_of_functions,
intercept = intrcpt)
rm(model_list)
dfs <- c(1,4,7,15)
models_list <- list()
for (df_ in dfs){
m <- list(fit = make_gam_fit(df_), predict = gam_predict)
models_list[[paste("gam_df_",df_,sep = "")]] <- m
}
start.time <- Sys.time()
all_results <- run_simulation(n_t, n_sim, n_external,
generate_nonlinear_data, performance_measures,
models_list, seed = 5^6, pooled = TRUE,
list_of_func = list_of_functions,
intercept = intrcpt)
print(paste("Simulation took", round(difftime(Sys.time(), start.time, units = "secs")),
"seconds to run."))
stopCluster(cl)
source("~/MustMast/Thesis/Code/Simulation/running_simulations/gam.R")
run_simulation <- function(n_training, n_simulation, n_external_data,
data_generating, performance_measures, models,
seed, pooled = TRUE, ...){
set.seed(seed)
random_seeds <- sample(1000000000, n_simulation)
source("validation_techniques.R", local = TRUE)
results <- foreach(i = 1:n_simulation, .combine = combine_results) %dopar% {
source("data_generation.R", local = TRUE)
set.seed(random_seeds[i])
full_data <- data_generating(n_training, ...)
kfold_result <- kfold_CV(full_data, performance_measures, models,
pooled = pooled, ...)
RCV_results <- repeated_CV(full_data, performance_measures, models,
pooled = pooled,  ...)
bootstrap_results <- bootstrap_methods(full_data, performance_measures, models, ...)
EP_T <- numeric(0)
external_data <- data_generating(n_external_data, ...)
for (model in models){
fitted_model <- model$fit(full_data)
pred <- model$predict(fitted_model, external_data)
EP_T <- c(EP_T, performance_measures$calculate_all(external_data$y, pred))
}
if(pooled){
result <- rbind(kfold_result$k_CV, kfold_result$pooled_CV,
RCV_results$rcv, RCV_results$pooled_rcv,
bootstrap_results, EP_T)
rownames(result) <- c("cv", "p_cv", "rcv", "p_rcv",
"SB", "0.632", "0.632+", "EP_T")
} else {result <- rbind(kfold_result, RCV_results, bootstrap_results, EP_T)}
result_names <- expand.grid(performance_measures$names, names(models))
result_names <- paste(result_names$Var2, result_names$Var1, sep = "_")
colnames(result) <- result_names
result
}
return(results)
}
start.time <- Sys.time()
all_results <- run_simulation(n_t, n_sim, n_external,
generate_nonlinear_data, performance_measures,
models_list, seed = 5^6, pooled = TRUE,
list_of_func = list_of_functions,
intercept = intrcpt)
source("validation_simulation.R")
getwd()
setwd
setwd("Simulation/")
source("validation_simulation.R")
source("data_generation.R")
library(doParallel, quiet = TRUE)
on_cluster <- Sys.info()['sysname'] == "Linux"
print(getwd())
cores <- if(on_cluster) Sys.getenv(paste("SLURM_CPUS_PER_TASK")) else 4
print(paste("Using ",cores, " cores"))
cl <- makeCluster(as.numeric(cores))
registerDoParallel(cl)
performance_measures <- create_performance_measures_list()
dfs <- c(1,4,7,15)
models_list <- list()
for (df_ in dfs){
m <- list(fit = make_gam_fit(df_), predict = gam_predict)
models_list[[paste("gam_df_",df_,sep = "")]] <- m
}
f_1 <- \(x) x^4/4-1
f_2 <- \(x) sin(x*1.5)*2
f_3 <- \(x) ifelse(x < 1, 1, -2*x + 3)
f_4 <- \(x) 1-x^2
list_of_functions <- list(f_1, f_2, f_3, f_4)
intrcpt <- 0.4372
n_sim <- 4 # its is rather low, but we can already see trends
n_t <- 100
n_external <- 10^5
start.time <- Sys.time()
all_results <- run_simulation(n_t, n_sim, n_external,
generate_nonlinear_data, performance_measures,
models_list, seed = 5^6, pooled = TRUE,
list_of_func = list_of_functions,
intercept = intrcpt)
print(paste("Simulation took", round(difftime(Sys.time(), start.time, units = "secs")),
"seconds to run."))
make_gam_fit <- function(df_) {
return(function(data, ...)  {
mgf <- function(d, df_ = 4){
n_pred <- ncol(d) - 2 #p and y are not predictors
var_names <- colnames(d)[1:n_pred]
if (length(df_) == n_pred) df_ <- rep(df_[1], n_pred)
#df_ <- as.integer(df_)
formula_ <- paste("s(",var_names,", df = ", df_, ")", sep = "")
formula_ <- paste(formula_, collapse = " + ")
formula_ <- paste("y ~", formula_)
return(as.formula(formula_))
}
return(gam::gam(mgf(data, df_), "binomial", data))
}
)
}
gc()
stopCluster(cl)
source("validation_simulation.R")
source("data_generation.R")
library(doParallel, quiet = TRUE)
on_cluster <- Sys.info()['sysname'] == "Linux"
print(getwd())
cores <- if(on_cluster) Sys.getenv(paste("SLURM_CPUS_PER_TASK")) else 4
print(paste("Using ",cores, " cores"))
cl <- makeCluster(as.numeric(cores))
registerDoParallel(cl)
performance_measures <- create_performance_measures_list()
dfs <- c(1,4,7,15)
models_list <- list()
for (df_ in dfs){
m <- list(fit = make_gam_fit(df_), predict = gam_predict)
models_list[[paste("gam_df_",df_,sep = "")]] <- m
}
f_1 <- \(x) x^4/4-1
f_2 <- \(x) sin(x*1.5)*2
f_3 <- \(x) ifelse(x < 1, 1, -2*x + 3)
f_4 <- \(x) 1-x^2
list_of_functions <- list(f_1, f_2, f_3, f_4)
intrcpt <- 0.4372
n_sim <- 4 # its is rather low, but we can already see trends
n_t <- 100
n_external <- 10^5
start.time <- Sys.time()
all_results <- run_simulation(n_t, n_sim, n_external,
generate_nonlinear_data, performance_measures,
models_list, seed = 5^6, pooled = TRUE,
list_of_func = list_of_functions,
intercept = intrcpt)
